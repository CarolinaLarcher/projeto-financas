{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "20ccde51-892f-44d3-9001-652ea68b2dd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from webdriver_manager.firefox import GeckoDriverManager\n",
    "from selenium.webdriver.firefox.service import Service as FirefoxService\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.webdriver.firefox.options import Options\n",
    "from selenium.webdriver.firefox.service import Service\n",
    "import time\n",
    "import pandas as pd\n",
    "import re\n",
    "import numpy as np\n",
    "import google.generativeai as genai\n",
    "from GoogleNews import GoogleNews\n",
    "from datetime import datetime, timedelta\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import display, HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3d06783d-21d4-4b4c-8e11-fc251be9d14c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configurar o WebDriver (certifique-se de que o GeckoDriver está no PATH)\n",
    "options = Options()\n",
    "options.headless = False  # Defina como True se não quiser ver a interface gráfica do navegador\n",
    "\n",
    "# Configurando o serviço do Firefox usando o GeckoDriverManager\n",
    "service = Service(GeckoDriverManager().install())\n",
    "\n",
    "# Inicializando o WebDriver do Firefox com o serviço configurado\n",
    "browser = webdriver.Firefox(service=service, options=options)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d151ddb2-1ed9-4260-a2c3-128fb5942323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <h4>Notícia 1:</h4>\n",
       "    <p><strong>Título:</strong> BB Seguridade (BBSE3) | Prévia 3T24: Sólida retomada t/t, mas modesto avanço a/a</p>\n",
       "    <p><strong>Descrição:</strong> Para o 3T de 2024, projetamos que a BB Seguridade apresente um lucro de R$ 2,08 bilhões, aumento de +1,1% a/a e +11,2% t/t.</p>\n",
       "    <p><strong>Link:</strong> <a href=\"https://analisa.genialinvestimentos.com.br/acoes/bb-seguridade/bb-seguridade-bbse3-previa-3t24-solida-retomada-t-t-mas-modesto-avanco-a-a/\" target=\"_blank\">https://analisa.genialinvestimentos.com.br/acoes/bb-seguridade/bb-seguridade-bbse3-previa-3t24-solida-retomada-t-t-mas-modesto-avanco-a-a/</a></p>\n",
       "    <p><strong>Resumo:</strong> Não foi possível gerar o resumo devido a um erro na requisição.</p> <!-- Adiciona o resumo aqui -->\n",
       "    <hr>\n",
       "    \n",
       "    <h4>Notícia 2:</h4>\n",
       "    <p><strong>Título:</strong> Day Trade: JBS (JBSS3) e mais 3 ações para vender nesta quarta-feira (9)</p>\n",
       "    <p><strong>Descrição:</strong> Para o Day Trade desta quarta-feira (09), ações como Cosan estão entre as recomendações de venda; confira outras.</p>\n",
       "    <p><strong>Link:</strong> <a href=\"https://www.moneytimes.com.br/day-trade-hoje-vender-jbs-jbss3-bb-seguridade-bbse3-acoes-quarta-feira-09-10-2024-visp/\" target=\"_blank\">https://www.moneytimes.com.br/day-trade-hoje-vender-jbs-jbss3-bb-seguridade-bbse3-acoes-quarta-feira-09-10-2024-visp/</a></p>\n",
       "    <p><strong>Resumo:</strong> O PagBank e a Ágora divulgaram suas recomendações de day trade para esta quarta-feira (9). As sugestões de compra e venda se baseiam em análises gráficas que buscam prever tendências de curtíssimo prazo. As operações devem ser monitoradas com atenção aos stops indicados para minimizar riscos. Lembre-se que investimentos envolvem riscos e não há garantia de retorno. \n",
       "</p> <!-- Adiciona o resumo aqui -->\n",
       "    <hr>\n",
       "    \n",
       "    <h4>Notícia 3:</h4>\n",
       "    <p><strong>Título:</strong> BB Seguridade (BBSE3): Oportunidade estratégica com a Selic em alta</p>\n",
       "    <p><strong>Descrição:</strong> A BB Seguridade (BBSE3) foi adicionada a Carteira Strategy da Ativa Investimentos com base em uma visão otimista sobre seu braço de previdên.</p>\n",
       "    <p><strong>Link:</strong> <a href=\"https://acionista.com.br/bb-seguridade-bbse3-oportunidade-estrategica-com-a-selic-em-alta/\" target=\"_blank\">https://acionista.com.br/bb-seguridade-bbse3-oportunidade-estrategica-com-a-selic-em-alta/</a></p>\n",
       "    <p><strong>Resumo:</strong> A Ativa Investimentos incluiu a BB Seguridade (BBSE3) em sua Carteira Strategy de outubro, impulsionada pelo cenário favorável de juros altos. A alta da Selic impacta positivamente o crescimento das reservas da empresa no segmento de previdência, principal motor de crescimento do grupo. A BB Seguridade se destaca por sua sólida posição de mercado, capacidade de gerar receitas consistentes e taxas de administração competitivas, tornando-a uma opção atraente para investidores que buscam ativos defensivos e rentáveis. A projeção de crescimento em duplo dígito nas reservas reforça a perspectiva otimista para o médio prazo. \n",
       "</p> <!-- Adiciona o resumo aqui -->\n",
       "    <hr>\n",
       "    \n",
       "    <h4>Notícia 4:</h4>\n",
       "    <p><strong>Título:</strong> Deterioração no agro liga sinal amarelo para BB (BBAS3) e BB Seguridade (BBSE3)</p>\n",
       "    <p><strong>Descrição:</strong> E além das empresas, outras duas companhias dependem fortemente do setor: BB Seguridade e Banco do Brasil. Clique para ler mais.</p>\n",
       "    <p><strong>Link:</strong> <a href=\"https://www.moneytimes.com.br/crise-no-agro-liga-sinal-amarelo-para-banco-do-brasil-e-bb-seguridade-rnda/\" target=\"_blank\">https://www.moneytimes.com.br/crise-no-agro-liga-sinal-amarelo-para-banco-do-brasil-e-bb-seguridade-rnda/</a></p>\n",
       "    <p><strong>Resumo:</strong> O BTG Pactual prevê um terceiro trimestre fraco para o Banco do Brasil (BBAS3) e BB Seguridade (BBSE3) devido à crise no agronegócio. A queda nos preços dos grãos e os atrasos no Plano Safra impactam o crédito rural, levando a maiores NPLs e provisões para o BB. O BTG também alerta para a menor emissão de prêmios rurais para o BBSE, o que pode afetar os lucros no futuro. Apesar das dificuldades, o banco projeta lucro líquido estável para o BB e BBSE no terceiro trimestre. \n",
       "</p> <!-- Adiciona o resumo aqui -->\n",
       "    <hr>\n",
       "    \n",
       "    <h4>Notícia 5:</h4>\n",
       "    <p><strong>Título:</strong> Nem o Plano Safra vai salvar? 3T24 de Banco do Brasil (BBAS3) e BB Seguridade (BBSE3) deve ser mais fraco, diz BTG</p>\n",
       "    <p><strong>Descrição:</strong> Redução no preço das commodities e fenômenos climáticos pressionam o segmento do agronegócio; BBAS3 e BBSE3 devem ter 3T24 mais fraco.</p>\n",
       "    <p><strong>Link:</strong> <a href=\"https://www.seudinheiro.com/2024/empresas/nem-o-plano-safra-vai-salvar-3t24-de-banco-do-brasil-bbas3-e-bb-seguridade-bbse3-deve-ser-mais-fraco-diz-btg-mnog/\" target=\"_blank\">https://www.seudinheiro.com/2024/empresas/nem-o-plano-safra-vai-salvar-3t24-de-banco-do-brasil-bbas3-e-bb-seguridade-bbse3-deve-ser-mais-fraco-diz-btg-mnog/</a></p>\n",
       "    <p><strong>Resumo:</strong> Devido à crise no agronegócio, o BTG Pactual prevê resultados fracos para o Banco do Brasil (BBAS3) e BB Seguridade (BBSE3) no terceiro trimestre. A redução no preço das commodities e os eventos climáticos impactam o setor, levando a margens apertadas para os produtores e aumento da inadimplência.  A BB Seguridade também sentirá os efeitos, com a redução dos seguros rurais, embora os sinistros devam ser menores. Apesar das perspectivas desafiadoras, o BTG mantém recomendação de compra para RAIL3.\n",
       "</p> <!-- Adiciona o resumo aqui -->\n",
       "    <hr>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Configurando a busca\n",
    "googlenews = GoogleNews()\n",
    "googlenews.setlang('pt')\n",
    "googlenews.search('BBSE3')\n",
    "\n",
    "# Obtendo os resultados\n",
    "news = googlenews.result()\n",
    "\n",
    "# Convertendo os resultados em um DataFrame\n",
    "df_news = pd.DataFrame(news)\n",
    "\n",
    "# Selecionando as 5 notícias mais recentes (baseado na ordem dos resultados)\n",
    "df_news = df_news.head(5)\n",
    "\n",
    "# Exibindo as 5 notícias mais recentes com título, descrição e link clicável\n",
    "output_html = \"\"\n",
    "\n",
    "# Cabeçalhos para simular uma requisição de um navegador\n",
    "headers = {\n",
    "    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n",
    "}\n",
    "\n",
    "# Configurar a chave de API\n",
    "genai.configure(api_key=\"AIzaSyBqSIvFig8B5-2_WjRCVpNQ1twI3KeoRB4\")\n",
    "\n",
    "# Instanciar o modelo\n",
    "model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "\n",
    "# Função para gerar conteúdo usando o modelo com múltiplos textos em um lote\n",
    "def gerar_resumo(texto):\n",
    "    prompt = f\"Por favor, gere um resumo para o texto a seguir, de no máximo 4 linhas:\\n{texto}\"\n",
    "    response = model.generate_content(prompt)\n",
    "    \n",
    "    # Acessa o texto gerado no resultado\n",
    "    if response.candidates:\n",
    "        resumo_texto = response.candidates[0].content.parts[0].text\n",
    "    else:\n",
    "        resumo_texto = \"Não foi possível gerar o resumo.\"\n",
    "    \n",
    "    return resumo_texto\n",
    "\n",
    "\n",
    "for index, row in df_news.iterrows():\n",
    "    title = row['title']\n",
    "    desc = row['desc']\n",
    "    link = row['link']\n",
    "    \n",
    "    # Limpar o link, removendo tudo após o primeiro '&'\n",
    "    clean_link = link.split('&')[0]\n",
    "    \n",
    "    # Fazendo o request para o link da notícia\n",
    "    try:\n",
    "        response = requests.get(clean_link, headers=headers)  # Adiciona os cabeçalhos\n",
    "        response.raise_for_status()  # Verifica se o request foi bem-sucedido\n",
    "        soup = BeautifulSoup(response.text, 'html.parser')\n",
    "        \n",
    "        # Extraindo o conteúdo\n",
    "        article_content = soup.find_all('p')\n",
    "        full_article = ' '.join([p.get_text() for p in article_content])\n",
    "\n",
    "        # Gerar resumo do conteúdo completo\n",
    "        resumo = gerar_resumo(full_article)\n",
    "\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        full_article = f\"Erro ao acessar a notícia: {e}\"\n",
    "        resumo = \"Não foi possível gerar o resumo devido a um erro na requisição.\"\n",
    "\n",
    "    # Formatação do texto em HTML\n",
    "    output_html += f\"\"\"\n",
    "    <h4>Notícia {index + 1}:</h4>\n",
    "    <p><strong>Título:</strong> {title}</p>\n",
    "    <p><strong>Descrição:</strong> {desc}</p>\n",
    "    <p><strong>Link:</strong> <a href=\"{clean_link}\" target=\"_blank\">{clean_link}</a></p>\n",
    "    <p><strong>Resumo:</strong> {resumo}</p> <!-- Adiciona o resumo aqui -->\n",
    "    <hr>\n",
    "    \"\"\"\n",
    "\n",
    "# Caso quisesse adicionar também a notícia completa:\n",
    "# <p><strong>Conteúdo Completo:</strong> {full_article[:500]}...</p> <!-- Limita a 500 caracteres para visualização -->\n",
    "\n",
    "# Exibe o resultado com links clicáveis e o conteúdo extraído\n",
    "display(HTML(output_html))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501c2ab7-5abe-4bce-b73a-8402e07b2319",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Ações"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2626867-b5b8-45f3-9e95-bfb0c9a19594",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1 style='font-size: 24px; text-align: center;'>BBSE3</h1>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Configurar a chave de API\n",
    "genai.configure(api_key=\"AIzaSyBqSIvFig8B5-2_WjRCVpNQ1twI3KeoRB4\")\n",
    "\n",
    "# Instanciar o modelo\n",
    "model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "\n",
    "# Função para gerar resumo usando o modelo\n",
    "def gerar_resumo(texto):\n",
    "    prompt = f\"Por favor, gere um resumo para o texto a seguir, de no máximo 4 linhas:\\n{texto}\"\n",
    "    response = model.generate_content(prompt)\n",
    "    \n",
    "    # Acessa o texto gerado no resultado\n",
    "    if response.candidates:\n",
    "        resumo_texto = response.candidates[0].content.parts[0].text\n",
    "    else:\n",
    "        resumo_texto = \"Não foi possível gerar o resumo.\"\n",
    "    \n",
    "    return resumo_texto\n",
    "\n",
    "# Função principal para buscar notícias\n",
    "def buscar_noticias(search_terms):\n",
    "    # Cabeçalhos para simular uma requisição de um navegador\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n",
    "    }\n",
    "\n",
    "    # Loop sobre cada termo de busca\n",
    "    for term in search_terms:\n",
    "        # Adiciona um título para o termo de busca\n",
    "        display(HTML(f\"<h1 style='font-size: 24px; text-align: center;'>{term}</h1>\"))\n",
    "        \n",
    "        googlenews = GoogleNews()\n",
    "        googlenews.setlang('pt')\n",
    "        googlenews.search(term)\n",
    "\n",
    "        # Obtendo os resultados\n",
    "        news = googlenews.result()\n",
    "\n",
    "        # Convertendo os resultados em um DataFrame\n",
    "        df_news = pd.DataFrame(news)\n",
    "\n",
    "        # Selecionando as 5 notícias mais recentes\n",
    "        df_news = df_news.head(5)\n",
    "\n",
    "        # Formatação do texto em HTML para exibição\n",
    "        output_html = \"\"\n",
    "\n",
    "        for index, row in df_news.iterrows():\n",
    "            title = row['title']\n",
    "            desc = row['desc']\n",
    "            link = row['link']\n",
    "            \n",
    "            # Limpar o link, removendo tudo após o primeiro '&'\n",
    "            clean_link = link.split('&')[0]\n",
    "            \n",
    "            # Fazendo o request para o link da notícia\n",
    "            try:\n",
    "                response = requests.get(clean_link, headers=headers)\n",
    "                response.raise_for_status()\n",
    "                soup = BeautifulSoup(response.text, 'html.parser')\n",
    "                \n",
    "                # Extraindo o conteúdo\n",
    "                article_content = soup.find_all('p')\n",
    "                full_article = ' '.join([p.get_text() for p in article_content])\n",
    "\n",
    "                # Gerar resumo do conteúdo completo\n",
    "                resumo = gerar_resumo(full_article)\n",
    "\n",
    "            except requests.exceptions.RequestException as e:\n",
    "                full_article = f\"Erro ao acessar a notícia: {e}\"\n",
    "                resumo = \"Não foi possível gerar o resumo devido a um erro na requisição.\"\n",
    "\n",
    "            # Formatação do resultado da notícia em HTML\n",
    "            output_html += f\"\"\"\n",
    "            <h4>Notícia {index + 1}:</h4>\n",
    "            <p><strong>Título:</strong> {title}</p>\n",
    "            <p><strong>Descrição:</strong> {desc}</p>\n",
    "            <p><strong>Link:</strong> <a href=\"{clean_link}\" target=\"_blank\">{clean_link}</a></p>\n",
    "            <p><strong>Resumo:</strong> {resumo}</p>\n",
    "            <hr>\n",
    "            \"\"\"\n",
    "\n",
    "        # Exibe o resultado para o termo de busca atual\n",
    "        display(HTML(output_html))\n",
    "\n",
    "        # Pausar por 10 segundos antes de continuar\n",
    "        time.sleep(10)\n",
    "\n",
    "# Exemplo de uso da função\n",
    "search_terms = [\n",
    "    'BBSE3', 'BBSEGURIDADE', 'SAPR4', 'SANEPAR', 'KLBN4', \n",
    "    'KLABIN S/A', 'VIVT3', 'TELEF BRASIL', 'ITSA4', 'ITAUSA', \n",
    "    'TAEE11', 'TAESA'\n",
    "]\n",
    "\n",
    "# Chame a função quando necessário\n",
    "buscar_noticias(search_terms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32c645e-3b75-42e6-a643-44977776911a",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Setores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6a6e5ca-a87d-4877-8cf7-8c531ba66d63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configurar a chave de API\n",
    "genai.configure(api_key=\"AIzaSyBqSIvFig8B5-2_WjRCVpNQ1twI3KeoRB4\")\n",
    "\n",
    "# Instanciar o modelo\n",
    "model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "\n",
    "# Função para gerar resumo usando o modelo\n",
    "def gerar_resumo(texto):\n",
    "    prompt = f\"Por favor, gere um resumo para o texto a seguir, de no máximo 4 linhas:\\n{texto}\"\n",
    "    response = model.generate_content(prompt)\n",
    "    \n",
    "    # Acessa o texto gerado no resultado\n",
    "    if response.candidates:\n",
    "        resumo_texto = response.candidates[0].content.parts[0].text\n",
    "    else:\n",
    "        resumo_texto = \"Não foi possível gerar o resumo.\"\n",
    "    \n",
    "    return resumo_texto\n",
    "\n",
    "# Função principal para buscar notícias\n",
    "def buscar_noticias(search_terms):\n",
    "    # Cabeçalhos para simular uma requisição de um navegador\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n",
    "    }\n",
    "\n",
    "    # Loop sobre cada termo de busca\n",
    "    for term in search_terms:\n",
    "        # Adiciona um título para o termo de busca\n",
    "        display(HTML(f\"<h1 style='font-size: 24px; text-align: center;'>{term}</h1>\"))\n",
    "        \n",
    "        googlenews = GoogleNews()\n",
    "        googlenews.setlang('pt')\n",
    "        googlenews.search(term)\n",
    "\n",
    "        # Obtendo os resultados\n",
    "        news = googlenews.result()\n",
    "\n",
    "        # Convertendo os resultados em um DataFrame\n",
    "        df_news = pd.DataFrame(news)\n",
    "\n",
    "        # Selecionando as 5 notícias mais recentes\n",
    "        df_news = df_news.head(5)\n",
    "\n",
    "        # Formatação do texto em HTML para exibição\n",
    "        output_html = \"\"\n",
    "\n",
    "        for index, row in df_news.iterrows():\n",
    "            title = row['title']\n",
    "            desc = row['desc']\n",
    "            link = row['link']\n",
    "            \n",
    "            # Limpar o link, removendo tudo após o primeiro '&'\n",
    "            clean_link = link.split('&')[0]\n",
    "            \n",
    "            # Fazendo o request para o link da notícia\n",
    "            try:\n",
    "                response = requests.get(clean_link, headers=headers)\n",
    "                response.raise_for_status()\n",
    "                soup = BeautifulSoup(response.text, 'html.parser')\n",
    "                \n",
    "                # Extraindo o conteúdo\n",
    "                article_content = soup.find_all('p')\n",
    "                full_article = ' '.join([p.get_text() for p in article_content])\n",
    "\n",
    "                # Gerar resumo do conteúdo completo\n",
    "                resumo = gerar_resumo(full_article)\n",
    "\n",
    "            except requests.exceptions.RequestException as e:\n",
    "                full_article = f\"Erro ao acessar a notícia: {e}\"\n",
    "                resumo = \"Não foi possível gerar o resumo devido a um erro na requisição.\"\n",
    "\n",
    "            # Formatação do resultado da notícia em HTML\n",
    "            output_html += f\"\"\"\n",
    "            <h4>Notícia {index + 1}:</h4>\n",
    "            <p><strong>Título:</strong> {title}</p>\n",
    "            <p><strong>Descrição:</strong> {desc}</p>\n",
    "            <p><strong>Link:</strong> <a href=\"{clean_link}\" target=\"_blank\">{clean_link}</a></p>\n",
    "            <p><strong>Resumo:</strong> {resumo}</p>\n",
    "            <hr>\n",
    "            \"\"\"\n",
    "\n",
    "        # Exibe o resultado para o termo de busca atual\n",
    "        display(HTML(output_html))\n",
    "\n",
    "        # Pausar por 10 segundos antes de continuar\n",
    "        time.sleep(10)\n",
    "\n",
    "# Exemplo de uso da função\n",
    "search_terms = [\n",
    "    'investimento setor Seguradora', 'investimento setor Bancos', 'investimento setor Telefonia', \n",
    "    'investimento setor Produção de papel e embalagens', 'investimento setor Produção de energia', \n",
    "    'investimento setor Hidrelétricas', 'investimento setor Transmissão de energia'\n",
    "]\n",
    "\n",
    "# Chame a função quando necessário\n",
    "buscar_noticias(search_terms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38cb1e81-f07b-4a8c-a7d2-d515c7e67718",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Fundos imobiliarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afb97cea-0006-49bc-9d2c-03691abff8a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configurar a chave de API\n",
    "genai.configure(api_key=\"AIzaSyBqSIvFig8B5-2_WjRCVpNQ1twI3KeoRB4\")\n",
    "\n",
    "# Instanciar o modelo\n",
    "model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "\n",
    "# Função para gerar resumo usando o modelo\n",
    "def gerar_resumo(texto):\n",
    "    prompt = f\"Por favor, gere um resumo para o texto a seguir, de no máximo 4 linhas:\\n{texto}\"\n",
    "    response = model.generate_content(prompt)\n",
    "    \n",
    "    # Acessa o texto gerado no resultado\n",
    "    if response.candidates:\n",
    "        resumo_texto = response.candidates[0].content.parts[0].text\n",
    "    else:\n",
    "        resumo_texto = \"Não foi possível gerar o resumo.\"\n",
    "    \n",
    "    return resumo_texto\n",
    "\n",
    "# Função principal para buscar notícias\n",
    "def buscar_noticias(search_terms):\n",
    "    # Cabeçalhos para simular uma requisição de um navegador\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n",
    "    }\n",
    "\n",
    "    # Loop sobre cada termo de busca\n",
    "    for term in search_terms:\n",
    "        # Adiciona um título para o termo de busca\n",
    "        display(HTML(f\"<h1 style='font-size: 24px; text-align: center;'>{term}</h1>\"))\n",
    "        \n",
    "        googlenews = GoogleNews()\n",
    "        googlenews.setlang('pt')\n",
    "        googlenews.search(term)\n",
    "\n",
    "        # Obtendo os resultados\n",
    "        news = googlenews.result()\n",
    "\n",
    "        # Convertendo os resultados em um DataFrame\n",
    "        df_news = pd.DataFrame(news)\n",
    "\n",
    "        # Selecionando as 5 notícias mais recentes\n",
    "        df_news = df_news.head(5)\n",
    "\n",
    "        # Formatação do texto em HTML para exibição\n",
    "        output_html = \"\"\n",
    "\n",
    "        for index, row in df_news.iterrows():\n",
    "            title = row['title']\n",
    "            desc = row['desc']\n",
    "            link = row['link']\n",
    "            \n",
    "            # Limpar o link, removendo tudo após o primeiro '&'\n",
    "            clean_link = link.split('&')[0]\n",
    "            \n",
    "            # Fazendo o request para o link da notícia\n",
    "            try:\n",
    "                response = requests.get(clean_link, headers=headers)\n",
    "                response.raise_for_status()\n",
    "                soup = BeautifulSoup(response.text, 'html.parser')\n",
    "                \n",
    "                # Extraindo o conteúdo\n",
    "                article_content = soup.find_all('p')\n",
    "                full_article = ' '.join([p.get_text() for p in article_content])\n",
    "\n",
    "                # Gerar resumo do conteúdo completo\n",
    "                resumo = gerar_resumo(full_article)\n",
    "\n",
    "            except requests.exceptions.RequestException as e:\n",
    "                full_article = f\"Erro ao acessar a notícia: {e}\"\n",
    "                resumo = \"Não foi possível gerar o resumo devido a um erro na requisição.\"\n",
    "\n",
    "            # Formatação do resultado da notícia em HTML\n",
    "            output_html += f\"\"\"\n",
    "            <h4>Notícia {index + 1}:</h4>\n",
    "            <p><strong>Título:</strong> {title}</p>\n",
    "            <p><strong>Descrição:</strong> {desc}</p>\n",
    "            <p><strong>Link:</strong> <a href=\"{clean_link}\" target=\"_blank\">{clean_link}</a></p>\n",
    "            <p><strong>Resumo:</strong> {resumo}</p>\n",
    "            <hr>\n",
    "            \"\"\"\n",
    "\n",
    "        # Exibe o resultado para o termo de busca atual\n",
    "        display(HTML(output_html))\n",
    "\n",
    "        # Pausar por 10 segundos antes de continuar\n",
    "        time.sleep(10)\n",
    "\n",
    "# Exemplo de uso da função\n",
    "search_terms = [\n",
    "    'RBRF11', 'FII RBRALPHA', 'BCFF11', 'FII BC FFII', 'RCRB11', 'FII RIOB RC', 'CPTS11', \n",
    "    'FII CAPI SEC', 'MALL11', 'FII MALLS BP', 'VISC11', 'FII VINCI SC', 'MXRF11', \n",
    "    'FII MAXI REN', 'XPLG11', 'FII XP LOG', 'GGRC11', 'FII GGRCOVEP'\n",
    "]\n",
    "\n",
    "# Chame a função quando necessário\n",
    "buscar_noticias(search_terms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "551f7885-ac78-40ad-8c50-1aa4837a7131",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Setores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "880a42e9-7eb6-4a24-b6c5-c545e8361fcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configurar a chave de API\n",
    "genai.configure(api_key=\"AIzaSyBqSIvFig8B5-2_WjRCVpNQ1twI3KeoRB4\")\n",
    "\n",
    "# Instanciar o modelo\n",
    "model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "\n",
    "# Função para gerar resumo usando o modelo\n",
    "def gerar_resumo(texto):\n",
    "    prompt = f\"Por favor, gere um resumo para o texto a seguir, de no máximo 4 linhas:\\n{texto}\"\n",
    "    response = model.generate_content(prompt)\n",
    "    \n",
    "    # Acessa o texto gerado no resultado\n",
    "    if response.candidates:\n",
    "        resumo_texto = response.candidates[0].content.parts[0].text\n",
    "    else:\n",
    "        resumo_texto = \"Não foi possível gerar o resumo.\"\n",
    "    \n",
    "    return resumo_texto\n",
    "\n",
    "# Função principal para buscar notícias\n",
    "def buscar_noticias(search_terms):\n",
    "    # Cabeçalhos para simular uma requisição de um navegador\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n",
    "    }\n",
    "\n",
    "    # Loop sobre cada termo de busca\n",
    "    for term in search_terms:\n",
    "        # Adiciona um título para o termo de busca\n",
    "        display(HTML(f\"<h1 style='font-size: 24px; text-align: center;'>{term}</h1>\"))\n",
    "        \n",
    "        googlenews = GoogleNews()\n",
    "        googlenews.setlang('pt')\n",
    "        googlenews.search(term)\n",
    "\n",
    "        # Obtendo os resultados\n",
    "        news = googlenews.result()\n",
    "\n",
    "        # Convertendo os resultados em um DataFrame\n",
    "        df_news = pd.DataFrame(news)\n",
    "\n",
    "        # Selecionando as 5 notícias mais recentes\n",
    "        df_news = df_news.head(5)\n",
    "\n",
    "        # Formatação do texto em HTML para exibição\n",
    "        output_html = \"\"\n",
    "\n",
    "        for index, row in df_news.iterrows():\n",
    "            title = row['title']\n",
    "            desc = row['desc']\n",
    "            link = row['link']\n",
    "            \n",
    "            # Limpar o link, removendo tudo após o primeiro '&'\n",
    "            clean_link = link.split('&')[0]\n",
    "            \n",
    "            # Fazendo o request para o link da notícia\n",
    "            try:\n",
    "                response = requests.get(clean_link, headers=headers)\n",
    "                response.raise_for_status()\n",
    "                soup = BeautifulSoup(response.text, 'html.parser')\n",
    "                \n",
    "                # Extraindo o conteúdo\n",
    "                article_content = soup.find_all('p')\n",
    "                full_article = ' '.join([p.get_text() for p in article_content])\n",
    "\n",
    "                # Gerar resumo do conteúdo completo\n",
    "                resumo = gerar_resumo(full_article)\n",
    "\n",
    "            except requests.exceptions.RequestException as e:\n",
    "                full_article = f\"Erro ao acessar a notícia: {e}\"\n",
    "                resumo = \"Não foi possível gerar o resumo devido a um erro na requisição.\"\n",
    "\n",
    "            # Formatação do resultado da notícia em HTML\n",
    "            output_html += f\"\"\"\n",
    "            <h4>Notícia {index + 1}:</h4>\n",
    "            <p><strong>Título:</strong> {title}</p>\n",
    "            <p><strong>Descrição:</strong> {desc}</p>\n",
    "            <p><strong>Link:</strong> <a href=\"{clean_link}\" target=\"_blank\">{clean_link}</a></p>\n",
    "            <p><strong>Resumo:</strong> {resumo}</p>\n",
    "            <hr>\n",
    "            \"\"\"\n",
    "\n",
    "        # Exibe o resultado para o termo de busca atual\n",
    "        display(HTML(output_html))\n",
    "\n",
    "        # Pausar por 10 segundos antes de continuar\n",
    "        time.sleep(10)\n",
    "\n",
    "# Exemplo de uso da função\n",
    "search_terms = [\n",
    "    'investimento setor Shoppings', 'investimento setor Galpões logísticos', 'investimento setor Prédios corporativos', \n",
    "    'investimento setor Prédios comerciais', 'investimento setor Papéis de tijolos', 'investimento setor Fundo de papéis', \n",
    "    'investimento setor Aluguel imobiliário'\n",
    "]\n",
    "\n",
    "# Chame a função quando necessário\n",
    "buscar_noticias(search_terms)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
